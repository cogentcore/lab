// Code generated by "core generate -add-types -add-funcs"; DO NOT EDIT.

package parse

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.Config", IDName: "config", Doc: "Config has the configuration info for the gosl system.", Fields: []types.Field{{Name: "Output", Doc: "Output is the output directory for shader code,\nrelative to where gosl is invoked; must not be an empty string."}, {Name: "Exclude", Doc: "Exclude is a comma-separated list of names of functions to exclude from exporting to WGSL."}, {Name: "Keep", Doc: "Keep keeps temporary converted versions of the source files, for debugging."}, {Name: "Debug", Doc: "\tDebug enables debugging messages while running."}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.exprListMode", IDName: "expr-list-mode"})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.paramMode", IDName: "param-mode"})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.sizeCounter", IDName: "size-counter", Doc: "sizeCounter is an io.Writer which counts the number of bytes written,\nas well as whether a newline character was seen.", Fields: []types.Field{{Name: "hasNewline"}, {Name: "size"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.whiteSpace", IDName: "white-space"})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.pmode", IDName: "pmode", Doc: "A pmode value represents the current printer mode."})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.commentInfo", IDName: "comment-info", Fields: []types.Field{{Name: "cindex"}, {Name: "comment"}, {Name: "commentOffset"}, {Name: "commentNewline"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.printer", IDName: "printer", Embeds: []types.Field{{Name: "PrintConfig", Doc: "Configuration (does not change after initialization)"}, {Name: "commentInfo", Doc: "Information about p.comments[p.cindex]; set up by nextComment."}}, Fields: []types.Field{{Name: "fset"}, {Name: "pkg"}, {Name: "output", Doc: "Current state"}, {Name: "indent"}, {Name: "level"}, {Name: "mode"}, {Name: "endAlignment"}, {Name: "impliedSemi"}, {Name: "lastTok"}, {Name: "prevOpen"}, {Name: "wsbuf"}, {Name: "goBuild"}, {Name: "plusBuild"}, {Name: "pos", Doc: "Positions\nThe out position differs from the pos position when the result\nformatting differs from the source formatting (in the amount of\nwhite space). If there's a difference and SourcePos is set in\nConfigMode, //line directives are used in the output to restore\noriginal source positions for a reader."}, {Name: "out"}, {Name: "last"}, {Name: "linePtr"}, {Name: "sourcePosErr"}, {Name: "comments", Doc: "The list of all source comments, in order of appearance."}, {Name: "useNodeComments"}, {Name: "nodeSizes", Doc: "Cache of already computed node sizes."}, {Name: "cachedPos", Doc: "Cache of most recently computed line position."}, {Name: "cachedLine"}, {Name: "curPtrArgs", Doc: "current arguments to function that are pointers and thus need dereferencing\nwhen accessing fields"}, {Name: "curMethRecv"}, {Name: "curReturnType"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.trimmer", IDName: "trimmer", Doc: "A trimmer is an io.Writer filter for stripping tabwriter.Escape\ncharacters, trailing blanks and tabs, and for converting formfeed\nand vtab characters into newlines and htabs (in case no tabwriter\nis used). Text bracketed by tabwriter.Escape characters is passed\nthrough unchanged.", Fields: []types.Field{{Name: "output"}, {Name: "state"}, {Name: "space"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.Mode", IDName: "mode", Doc: "A Mode value is a set of flags (or 0). They control printing."})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.PrintConfig", IDName: "print-config", Doc: "A PrintConfig node controls the output of Fprint.", Fields: []types.Field{{Name: "Mode"}, {Name: "Tabwidth"}, {Name: "Indent"}, {Name: "ExcludeFunctions"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.CommentedNode", IDName: "commented-node", Doc: "A CommentedNode bundles an AST node and corresponding comments.\nIt may be provided as argument to any of the [Fprint] functions.", Fields: []types.Field{{Name: "Node"}, {Name: "Comments"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.Replace", IDName: "replace", Fields: []types.Field{{Name: "From"}, {Name: "To"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.Var", IDName: "var", Doc: "Var represents one variable", Fields: []types.Field{{Name: "Name"}, {Name: "Type"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.Group", IDName: "group", Doc: "Group represents one variable group.", Fields: []types.Field{{Name: "Vars"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.System", IDName: "system", Doc: "System represents a ComputeSystem, and its variables.", Fields: []types.Field{{Name: "Name"}, {Name: "Groups"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.Kernel", IDName: "kernel", Doc: "Kernel represents a kernel function, which is the basis for\neach wgsl generated code file.", Fields: []types.Field{{Name: "Name"}, {Name: "FileLines", Doc: "accumulating lines of code for the wgsl file."}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.File", IDName: "file", Doc: "File has info for a file being processed", Fields: []types.Field{{Name: "Name"}, {Name: "Lines"}}})

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/goal/gosl/parse.State", IDName: "state", Doc: "State holds the current processing state", Fields: []types.Field{{Name: "Config", Doc: "Config options"}, {Name: "Files", Doc: "files with gosl content in current directory"}, {Name: "Imports"}, {Name: "Kernels"}, {Name: "Systems"}, {Name: "ExcludeMap", Doc: "ExcludeMap is the compiled map of functions to exclude."}}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.formatDocComment", Doc: "formatDocComment reformats the doc comment list,\nreturning the canonical formatting.", Args: []string{"list"}, Returns: []string{"Comment"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.isDirective", Doc: "isDirective reports whether c is a comment directive.\nSee go.dev/issue/37974.\nThis code is also in go/ast.", Args: []string{"c"}, Returns: []string{"bool"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.allStars", Doc: "allStars reports whether text is the interior of an\nold-style /* */ comment with a star at the start of each line.", Args: []string{"text"}, Returns: []string{"bool"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.Run", Directives: []types.Directive{{Tool: "cli", Directive: "cmd", Args: []string{"-root"}}, {Tool: "types", Directive: "add"}}, Args: []string{"cfg"}, Returns: []string{"error"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.ReadFileLines", Args: []string{"fn"}, Returns: []string{"[][]byte", "error"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.HasGoslTag", Doc: "HasGoslTag returns true if given file has a //gosl: tag", Args: []string{"lines"}, Returns: []string{"bool"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.IsGoFile", Args: []string{"f"}, Returns: []string{"bool"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.IsWGSLFile", Args: []string{"f"}, Returns: []string{"bool"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.IsSPVFile", Args: []string{"f"}, Returns: []string{"bool"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.RemoveGenFiles", Doc: "RemoveGenFiles removes .go, .wgsl, .spv files in shader generated dir", Args: []string{"dir"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.appendLines", Doc: "appendLines is like append(x, y...)\nbut it avoids creating doubled blank lines,\nwhich would not be gofmt-standard output.\nIt assumes that only whole blocks of lines are being appended,\nnot line fragments.", Args: []string{"x", "y"}, Returns: []string{"[]byte"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.isNL", Args: []string{"b"}, Returns: []string{"bool"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.combinesWithName", Doc: "combinesWithName reports whether a name followed by the expression x\nsyntactically combines to another valid (value) expression. For instance\nusing *T for x, \"name *T\" syntactically appears as the expression x*T.\nOn the other hand, using  P|Q or *P|~Q for x, \"name P|Q\" or name *P|~Q\"\ncannot be combined into a valid (value) expression.", Args: []string{"x"}, Returns: []string{"bool"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.isTypeElem", Doc: "isTypeElem reports whether x is a (possibly parenthesized) type element expression.\nThe result is false if x could be a type element OR an ordinary (value) expression.", Args: []string{"x"}, Returns: []string{"bool"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.identListSize", Args: []string{"list", "maxSize"}, Returns: []string{"size"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.walkBinary", Args: []string{"e"}, Returns: []string{"has4", "has5", "maxProblem"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.cutoff", Args: []string{"e", "depth"}, Returns: []string{"int"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.diffPrec", Args: []string{"expr", "prec"}, Returns: []string{"int"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.reduceDepth", Args: []string{"depth"}, Returns: []string{"int"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.isBinary", Args: []string{"expr"}, Returns: []string{"bool"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.normalizedNumber", Doc: "normalizedNumber rewrites base prefixes and exponents\nof numbers to use lower-case letters (0X123 to 0x123 and 1.2E3 to 1.2e3),\nand removes leading 0's from integer imaginary literals (0765i to 765i).\nIt leaves hexadecimal digits alone.\n\nnormalizedNumber doesn't modify the ast.BasicLit value lit points to.\nIf lit is not a number or a number in canonical format already,\nlit is returned as is. Otherwise a new ast.BasicLit is created.", Args: []string{"lit"}, Returns: []string{"BasicLit"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.fieldByName", Args: []string{"st", "name"}, Returns: []string{"Var"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.getLocalTypeName", Args: []string{"typ"}, Returns: []string{"string"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.getStructType", Args: []string{"typ"}, Returns: []string{"Struct", "error"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.isTypeName", Args: []string{"x"}, Returns: []string{"bool"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.stripParens", Args: []string{"x"}, Returns: []string{"Expr"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.stripParensAlways", Args: []string{"x"}, Returns: []string{"Expr"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.keepTypeColumn", Doc: "The keepTypeColumn function determines if the type column of a series of\nconsecutive const or var declarations must be kept, or if initialization\nvalues (V) can be placed in the type column (T) instead. The i'th entry\nin the result slice is true if the type column in spec[i] must be kept.\n\nFor example, the declaration:\n\n\t\tconst (\n\t\t\tfoobar int = 42 // comment\n\t\t\tx          = 7  // comment\n\t\t\tfoo\n\t             bar = 991\n\t\t)\n\nleads to the type/values matrix below. A run of value columns (V) can\nbe moved into the type column if there is no type for any of the values\nin that column (we only move entire columns so that they align properly).\n\n\t\tmatrix        formatted     result\n\t                   matrix\n\t\tT  V    ->    T  V     ->   true      there is a T and so the type\n\t\t-  V          -  V          true      column must be kept\n\t\t-  -          -  -          false\n\t\t-  V          V  -          false     V is moved into T column", Args: []string{"specs"}, Returns: []string{"[]bool"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.sanitizeImportPath", Args: []string{"lit"}, Returns: []string{"BasicLit"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.declToken", Args: []string{"decl"}, Returns: []string{"tok"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.isBlank", Doc: "Returns true if s contains only white space\n(only tabs and blanks can appear in the printer's context).", Args: []string{"s"}, Returns: []string{"bool"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.commonPrefix", Doc: "commonPrefix returns the common prefix of a and b.", Args: []string{"a", "b"}, Returns: []string{"string"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.trimRight", Doc: "trimRight returns s with trailing whitespace removed.", Args: []string{"s"}, Returns: []string{"string"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.stripCommonPrefix", Doc: "stripCommonPrefix removes a common prefix from /*-style comment lines (unless no\ncomment line is indented, all but the first line have some form of space prefix).\nThe prefix is computed using heuristics such that is likely that the comment\ncontents are nicely laid out after re-printing each line using the printer's\ncurrent indentation.", Args: []string{"lines"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.nlimit", Doc: "nlimit limits n to maxNewlines.", Args: []string{"n"}, Returns: []string{"int"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.mayCombine", Args: []string{"prev", "next"}, Returns: []string{"b"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.getDoc", Doc: "getDoc returns the ast.CommentGroup associated with n, if any.", Args: []string{"n"}, Returns: []string{"CommentGroup"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.getLastComment", Args: []string{"n"}, Returns: []string{"CommentGroup"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.newPrinter", Args: []string{"cfg", "pkg", "nodeSizes"}, Returns: []string{"printer"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.Fprint", Doc: "Fprint \"pretty-prints\" an AST node to output.\nIt calls [PrintConfig.Fprint] with default settings.\nNote that gofmt uses tabs for indentation but spaces for alignment;\nuse format.Node (package go/format) for output that matches gofmt.", Args: []string{"output", "pkg", "node"}, Returns: []string{"error"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.wgslFile", Doc: "wgslFile returns the file with a \".wgsl\" extension", Args: []string{"fn"}, Returns: []string{"string"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.bareFile", Doc: "bareFile returns the file with no extention", Args: []string{"fn"}, Returns: []string{"string"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.MoveLines", Doc: "MoveLines moves the st,ed region to 'to' line", Args: []string{"lines", "to", "st", "ed"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.SlEdits", Doc: "SlEdits performs post-generation edits for wgsl\n* moves wgsl segments around, e.g., methods\ninto their proper classes\n* fixes printf, slice other common code\nreturns true if a slrand. or sltype. prefix was found,\ndriveing copying of those files.", Args: []string{"src"}, Returns: []string{"[]byte", "bool", "bool"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.MathReplaceAll", Args: []string{"mat", "ln"}, Returns: []string{"[]byte"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.SlEditsReplace", Doc: "SlEditsReplace replaces Go with equivalent WGSL code\nreturns true if has slrand. or sltype.\nto auto include that header file if so.", Args: []string{"lines"}, Returns: []string{"bool", "bool"}})

var _ = types.AddFunc(&types.Func{Name: "cogentcore.org/core/goal/gosl/parse.SlBoolReplace", Doc: "SlBoolReplace replaces all the slbool methods with literal int32 expressions.", Args: []string{"lines"}})
