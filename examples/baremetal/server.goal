// Copyright (c) 2025, Cogent Lab. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package baremetal

// Server specifies a bare metal Server.
type Server struct {
	// Name is the alias used for gossh.
	Name string

	// SSH is string to gossh to.
	SSH string

	// NGPUs is the number of GPUs on this server.
	NGPUs int

	// Used is a map of GPUs current being used.
	Used map[int]bool `edit:"-" toml:"-"`
}

// ServerAvail is used to report the number of available gpus per server.
type ServerAvail struct {
	Name string 
	Avail int
}

// OpenSSH opens the SSH connection for this server.
func (sv *Server) OpenSSH() {
	if sv.Used == nil {
		sv.Used = make(map[int]bool)
	}
	gossh {sv.SSH} {sv.Name}
}

// ID returns the server SSH ID string: @Name
func (sv *Server) ID() string {
	return "@" + sv.Name
}

// Use makes this the active server.
func (sv *Server) Use() {
	${sv.ID()}$
}

// Avail returns the number of servers available.
func (sv *Server) Avail() int {
	return sv.NGPUs - len(sv.Used)
}

// AvailableGPUs returns the number of GPUs available on servers.
// Only includes servers with availability (nil if nothing avail).
func (bm *BareMetal) AvailableGPUs() []ServerAvail {
	var avail []ServerAvail
	for _, sv := range bm.Servers.Values {
		na := sv.Avail()
		if na > 0 {
			avail = append(avail, ServerAvail{Name: sv.Name, Avail: na})
		}
	}
	return avail
}

// NextGPU returns the next GPU index available,
// and adds it to the Used list. Returns -1 if none available.
func (sv *Server) NextGPU() int {
	for i := range sv.NGPUs {
		_, used := sv.Used[i]
		if !used {
			sv.Used[i] = true
			return i
		}
	}
	return -1
}

// FreeGPU makes the given GPU number available.
func (sv *Server) FreeGPU(gpu int) {
	delete(sv.Used, gpu)
}
