// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: baremetal/baremetal.proto

package baremetal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BareMetal_Submit_FullMethodName       = "/baremetal.BareMetal/Submit"
	BareMetal_JobStatus_FullMethodName    = "/baremetal.BareMetal/JobStatus"
	BareMetal_CancelJobs_FullMethodName   = "/baremetal.BareMetal/CancelJobs"
	BareMetal_FetchResults_FullMethodName = "/baremetal.BareMetal/FetchResults"
	BareMetal_UpdateJobs_FullMethodName   = "/baremetal.BareMetal/UpdateJobs"
)

// BareMetalClient is the client API for BareMetal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BareMetalClient interface {
	Submit(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*Job, error)
	JobStatus(ctx context.Context, in *JobIDList, opts ...grpc.CallOption) (*JobList, error)
	CancelJobs(ctx context.Context, in *JobIDList, opts ...grpc.CallOption) (*Error, error)
	FetchResults(ctx context.Context, in *JobIDList, opts ...grpc.CallOption) (*JobList, error)
	UpdateJobs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bareMetalClient struct {
	cc grpc.ClientConnInterface
}

func NewBareMetalClient(cc grpc.ClientConnInterface) BareMetalClient {
	return &bareMetalClient{cc}
}

func (c *bareMetalClient) Submit(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*Job, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Job)
	err := c.cc.Invoke(ctx, BareMetal_Submit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalClient) JobStatus(ctx context.Context, in *JobIDList, opts ...grpc.CallOption) (*JobList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobList)
	err := c.cc.Invoke(ctx, BareMetal_JobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalClient) CancelJobs(ctx context.Context, in *JobIDList, opts ...grpc.CallOption) (*Error, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Error)
	err := c.cc.Invoke(ctx, BareMetal_CancelJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalClient) FetchResults(ctx context.Context, in *JobIDList, opts ...grpc.CallOption) (*JobList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobList)
	err := c.cc.Invoke(ctx, BareMetal_FetchResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalClient) UpdateJobs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetal_UpdateJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BareMetalServer is the server API for BareMetal service.
// All implementations must embed UnimplementedBareMetalServer
// for forward compatibility.
type BareMetalServer interface {
	Submit(context.Context, *Submission) (*Job, error)
	JobStatus(context.Context, *JobIDList) (*JobList, error)
	CancelJobs(context.Context, *JobIDList) (*Error, error)
	FetchResults(context.Context, *JobIDList) (*JobList, error)
	UpdateJobs(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedBareMetalServer()
}

// UnimplementedBareMetalServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBareMetalServer struct{}

func (UnimplementedBareMetalServer) Submit(context.Context, *Submission) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedBareMetalServer) JobStatus(context.Context, *JobIDList) (*JobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStatus not implemented")
}
func (UnimplementedBareMetalServer) CancelJobs(context.Context, *JobIDList) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJobs not implemented")
}
func (UnimplementedBareMetalServer) FetchResults(context.Context, *JobIDList) (*JobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchResults not implemented")
}
func (UnimplementedBareMetalServer) UpdateJobs(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobs not implemented")
}
func (UnimplementedBareMetalServer) mustEmbedUnimplementedBareMetalServer() {}
func (UnimplementedBareMetalServer) testEmbeddedByValue()                   {}

// UnsafeBareMetalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BareMetalServer will
// result in compilation errors.
type UnsafeBareMetalServer interface {
	mustEmbedUnimplementedBareMetalServer()
}

func RegisterBareMetalServer(s grpc.ServiceRegistrar, srv BareMetalServer) {
	// If the following call pancis, it indicates UnimplementedBareMetalServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BareMetal_ServiceDesc, srv)
}

func _BareMetal_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Submission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetal_Submit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServer).Submit(ctx, req.(*Submission))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetal_JobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobIDList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServer).JobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetal_JobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServer).JobStatus(ctx, req.(*JobIDList))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetal_CancelJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobIDList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServer).CancelJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetal_CancelJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServer).CancelJobs(ctx, req.(*JobIDList))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetal_FetchResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobIDList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServer).FetchResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetal_FetchResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServer).FetchResults(ctx, req.(*JobIDList))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetal_UpdateJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServer).UpdateJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetal_UpdateJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServer).UpdateJobs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BareMetal_ServiceDesc is the grpc.ServiceDesc for BareMetal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BareMetal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "baremetal.BareMetal",
	HandlerType: (*BareMetalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _BareMetal_Submit_Handler,
		},
		{
			MethodName: "JobStatus",
			Handler:    _BareMetal_JobStatus_Handler,
		},
		{
			MethodName: "CancelJobs",
			Handler:    _BareMetal_CancelJobs_Handler,
		},
		{
			MethodName: "FetchResults",
			Handler:    _BareMetal_FetchResults_Handler,
		},
		{
			MethodName: "UpdateJobs",
			Handler:    _BareMetal_UpdateJobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "baremetal/baremetal.proto",
}
