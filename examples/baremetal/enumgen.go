// Code generated by "core generate"; DO NOT EDIT.

package baremetal

import (
	"cogentcore.org/core/enums"
)

var _StatusValues = []Status{0, 1, 2, 3, 4, 5}

// StatusN is the highest valid value for type Status, plus one.
const StatusN Status = 6

var _StatusValueMap = map[string]Status{`NoStatus`: 0, `Pending`: 1, `Running`: 2, `Completed`: 3, `Canceled`: 4, `Errored`: 5}

var _StatusDescMap = map[Status]string{0: `NoStatus is the unknown status state.`, 1: `Pending means the job has been submitted, but not yet run.`, 2: `Running means the job is running.`, 3: `Completed means the job finished on its own, with no error status.`, 4: `Canceled means the job was canceled by the user.`, 5: `Errored means the job quit with an error`}

var _StatusMap = map[Status]string{0: `NoStatus`, 1: `Pending`, 2: `Running`, 3: `Completed`, 4: `Canceled`, 5: `Errored`}

// String returns the string representation of this Status value.
func (i Status) String() string { return enums.String(i, _StatusMap) }

// SetString sets the Status value from its string representation,
// and returns an error if the string is invalid.
func (i *Status) SetString(s string) error { return enums.SetString(i, s, _StatusValueMap, "Status") }

// Int64 returns the Status value as an int64.
func (i Status) Int64() int64 { return int64(i) }

// SetInt64 sets the Status value from an int64.
func (i *Status) SetInt64(in int64) { *i = Status(in) }

// Desc returns the description of the Status value.
func (i Status) Desc() string { return enums.Desc(i, _StatusDescMap) }

// StatusValues returns all possible values for the type Status.
func StatusValues() []Status { return _StatusValues }

// Values returns all possible values for the type Status.
func (i Status) Values() []enums.Enum { return enums.Values(_StatusValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Status) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Status) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Status") }
