// Code generated by "goal build"; DO NOT EDIT.
//line jobs.goal:1
// Copyright (c) 2024, Cogent Lab. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"bytes"
	"fmt"
	"path/filepath"

	"cogentcore.org/core/base/errors"
	"cogentcore.org/core/base/fsx"
	"cogentcore.org/lab/goal/goalib"
	"cogentcore.org/lab/table"
	"cogentcore.org/lab/tensor"
)

// Jobs updates the Jobs tab with a Table showing all the Jobs
// with their meta data.  Uses the dbmeta.toml data compiled from
// the Status function.
func (br *SimRun) Jobs() { //types:add

	ts := br.Tabs.AsLab()
	tv := ts.TensorTable("Jobs", br.JobsTable)
	dt := br.JobsTable
	br.JobsTableView = tv
	dpath := filepath.Join(br.DataRoot, "jobs")
	// fmt.Println("opening data at:", dpath)

	if dt.NumColumns() == 0 {
		dbfmt := filepath.Join(br.DataRoot, "dbformat.csv")
		fdt := table.New()
		if errors.Log1(fsx.FileExists(dbfmt)) {
			fdt.OpenCSV(fsx.Filename(dbfmt), tensor.Tab)
		} else {
			fdt.ReadCSV(bytes.NewBuffer([]byte(defaultJobFormat)), tensor.Tab)
		}
		dt.ConfigFromTable(fdt)
	}

	ds := fsx.Dirs(dpath)
	dt.SetNumRows(len(ds))
	for i, d := range ds {
		dt.Column("JobID").SetString(d, i)
		dp := filepath.Join(dpath, d)
		meta := filepath.Join(dp, "dbmeta.toml")
		if goalib.FileExists(meta) {
			// md := br.OpenTOML(meta)
			//
			//	for k, v := range md {
			//		dt.Column(k).SetString(v, i)
			//	}
		}
	}
	tv.Table.Sequential()
	br.Update()
	nrows := dt.NumRows()
	if nrows > 0 && br.Config.Submit.Message == "" {
		br.Config.Submit.Message = dt.Column("Message").String1D(nrows - 1)
		br.Config.Submit.Args = dt.Column("Args").String1D(nrows - 1)
		br.Config.Submit.Label = dt.Column("Label").String1D(nrows - 1)
	}
}

// Default update function:
func (br *SimRun) UpdateFunc() {
	br.Jobs()
}

func (br *SimRun) JobPath(jid string) string {
	return filepath.Join(br.DataRoot, "jobs", jid)
}

func (br *SimRun) ServerJobPath(jid string) string {
	return filepath.Join(br.Config.ServerRoot, "jobs", jid)
}

func (br *SimRun) JobRow(jid string) int {
	jt := br.JobsTable.Column("JobID")
	nr := jt.DimSize(0)
	for i := range nr {
		if jt.String1D(i) == jid {
			return i
		}
	}
	fmt.Println("JobRow ERROR: job id:", jid, "not found")
	return -1
}

// ValueForJob returns value in given column for given job id
func (br *SimRun) ValueForJob(jid, column string) string {
	if jrow := br.JobRow(jid); jrow >= 0 {
		return br.JobsTable.Column(column).String1D(jrow)
	}
	return ""
}
