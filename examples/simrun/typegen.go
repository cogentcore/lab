// Code generated by "core generate -add-types -add-funcs"; DO NOT EDIT.

package main

import (
	"cogentcore.org/core/core"
	"cogentcore.org/core/tree"
	"cogentcore.org/core/types"
	"cogentcore.org/lab/table"
	"cogentcore.org/lab/tensorcore"
)

var _ = types.AddType(&types.Type{Name: "main.FilterResults", IDName: "filter-results", Doc: "FilterResults specifies which results files to open.", Fields: []types.Field{{Name: "FileContains", Doc: "File name contains this string, e.g., \"_epc\" or \"_run\""}, {Name: "Ext", Doc: "extension of files, e.g., .tsv"}}})

var _ = types.AddType(&types.Type{Name: "main.SubmitParams", IDName: "submit-params", Doc: "SubmitParams specifies the parameters for submitting a job.", Fields: []types.Field{{Name: "Message", Doc: "Message describing the simulation:\nthis is key info for what is special about this job, like a github commit message"}, {Name: "Label", Doc: "Label is brief, unique label used for plots to label this job"}, {Name: "Args", Doc: "\targuments to pass on the command line.\n\n-nogui is already passed by default"}}})

var _ = types.AddType(&types.Type{Name: "main.JobParams", IDName: "job-params", Doc: "JobParams are parameters for running the job", Fields: []types.Field{{Name: "NRuns", Doc: "number of parallel runs; can also set to 1 and run multiple runs per job using args"}, {Name: "Hours", Doc: "max number of hours: slurm will terminate if longer, so be generous\n2d = 48, 3d = 72, 4d = 96, 5d = 120, 6d = 144, 7d = 168"}, {Name: "Memory", Doc: "memory per CPU in gigabytes"}, {Name: "Tasks", Doc: "number of mpi \"tasks\" (procs in MPI terminology)"}, {Name: "CPUsPerTask", Doc: "number of cpu cores (threads) per task"}, {Name: "TasksPerNode", Doc: "how to allocate tasks within compute nodes\ncpus_per_task * tasks_per_node <= total cores per node"}, {Name: "Qos", Doc: "qos is the queue \"quality of service\" name"}}})

var _ = types.AddType(&types.Type{Name: "main.Configuration", IDName: "configuration", Doc: "Configuration holds all of the user-settable parameters", Fields: []types.Field{{Name: "DataRoot", Doc: "DataRoot is the path to the root of the data to browse."}, {Name: "StartDir", Doc: "StartDir is the starting directory, where the app was originally started."}, {Name: "User", Doc: "User id as in system login name (i.e., user@system)"}, {Name: "UserShort", Doc: "first 3 letters of User, for naming jobs (auto-set from User)"}, {Name: "Project", Doc: "name of simulation project, lowercase (should be name of source dir)"}, {Name: "Version", Doc: "current git version string, from git describe --tags"}, {Name: "Job", Doc: "parameters for job resources etc"}, {Name: "FetchFiles", Doc: "glob expression for files to fetch from server, for Fetch command,\nis *.tsv by default"}, {Name: "ExcludeNodes", Doc: "nodes to exclude from job, based on what is slow"}, {Name: "ExtraFiles", Doc: "extra files to upload with job submit, from same dir"}, {Name: "ExtraDirs", Doc: "subdirs with other files to upload with job submit (non-code -- see CodeDirs)"}, {Name: "CodeDirs", Doc: "subdirs with code to upload with job submit; go.mod auto-updated to use"}, {Name: "ServerName", Doc: "name of current server using to run jobs; gets recorded with each job"}, {Name: "ExtraGoGet", Doc: "ExtraGoGet is an extra package to do \"go get\" with, for launching the job.\nTypically set this to the parent packge if running within a larger package\nupon which this simulation depends, e.g., \"github.com/emer/axon/v2@main\""}, {Name: "ServerRoot", Doc: "root path from user home dir on server.\nis auto-set to: filepath.Join(\"simdata\", Project, User)"}, {Name: "TimeFormat", Doc: "format for timestamps, defaults to \"2006-01-02 15:04:05 MST\""}, {Name: "Filter", Doc: "parameters for filtering results"}, {Name: "Submit", Doc: "parameters for submitting jobs; set from last job run"}}})

var _ = types.AddType(&types.Type{Name: "main.Result", IDName: "result", Doc: "Result has info for one loaded result, as a table.Table", Fields: []types.Field{{Name: "JobID", Doc: "job id for results"}, {Name: "Label", Doc: "short label used as a legend in the plot"}, {Name: "Message", Doc: "description of job"}, {Name: "Args", Doc: "args used in running job"}, {Name: "Path", Doc: "path to data"}, {Name: "Table", Doc: "result data"}}})

var _ = types.AddType(&types.Type{Name: "main.SimRun", IDName: "sim-run", Doc: "SimRun is a data browser with the files as the left panel,\nand the Tabber as the right panel.", Methods: []types.Method{{Name: "EditConfig", Doc: "EditConfig edits the configuration", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}, {Name: "Jobs", Doc: "Jobs updates the Jobs tab with a Table showing all the Jobs\nwith their meta data.  Uses the dbmeta.toml data compiled from\nthe Status function.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}, {Name: "Queue", Doc: "Queue runs a queue query command on the server and shows the results.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}, {Name: "Status", Doc: "Status gets updated job.* files from the server for any job that\ndoesn't have a Finalized or Fetched status.  It updates the\nstatus based on the server job status query, assigning a\nstatus of Finalized if job is done.  Updates the dbmeta.toml\ndata based on current job data.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}, {Name: "Fetch", Doc: "Fetch retrieves all the .tsv data files from the server\nfor any jobs not already marked as Fetched.\nOperates on the jobs selected in the Jobs table,\nor on all jobs if none selected.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}, {Name: "Cancel", Doc: "Cancel cancels the jobs selected in the Jobs table,\nwith a confirmation prompt.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}, {Name: "Delete", Doc: "Delete deletes the selected Jobs, with a confirmation prompt.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}, {Name: "Archive", Doc: "Archive moves the selected Jobs to the Archive directory,\nlocally, and deletes them from the server,\nfor results that are useful but not immediately relevant.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}, {Name: "Results", Doc: "Results loads specific .tsv data files from the jobs selected\nin the Jobs table, into the Results table.  There are often\nmultiple result files per job, so this step is necessary to\nchoose which such files to select for plotting.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}, {Name: "Diff", Doc: "Diff shows the differences between two selected jobs, or if only\none job is selected, between that job and the current source directory.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}, {Name: "Plot", Doc: "Plot concatenates selected Results data files and generates a plot\nof the resulting data.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}, {Name: "Reset", Doc: "Reset resets the Results table", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}, {Name: "Submit", Doc: "Submit submits a job to SLURM on the server, using an array\nstructure, with an outer startup job that calls the main array\njobs and a final cleanup job.  Creates a new job dir based on\nincrementing counter, synchronizing the job files.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}}, Embeds: []types.Field{{Name: "Frame"}, {Name: "Browser"}}, Fields: []types.Field{{Name: "Config", Doc: "Config holds all the configuration settings."}, {Name: "JobsTableView", Doc: "JobsTableView is the view of the jobs table."}, {Name: "JobsTable", Doc: "JobsTable is the jobs Table with one row per job."}, {Name: "ResultsTableView", Doc: "ResultsTableView has the results table."}, {Name: "ResultsList", Doc: "ResultsList is the list of result records."}}})

// NewSimRun returns a new [SimRun] with the given optional parent:
// SimRun is a data browser with the files as the left panel,
// and the Tabber as the right panel.
func NewSimRun(parent ...tree.Node) *SimRun { return tree.New[SimRun](parent...) }

// SetConfig sets the [SimRun.Config]:
// Config holds all the configuration settings.
func (t *SimRun) SetConfig(v Configuration) *SimRun { t.Config = v; return t }

// SetJobsTableView sets the [SimRun.JobsTableView]:
// JobsTableView is the view of the jobs table.
func (t *SimRun) SetJobsTableView(v *tensorcore.Table) *SimRun { t.JobsTableView = v; return t }

// SetJobsTable sets the [SimRun.JobsTable]:
// JobsTable is the jobs Table with one row per job.
func (t *SimRun) SetJobsTable(v *table.Table) *SimRun { t.JobsTable = v; return t }

// SetResultsTableView sets the [SimRun.ResultsTableView]:
// ResultsTableView has the results table.
func (t *SimRun) SetResultsTableView(v *core.Table) *SimRun { t.ResultsTableView = v; return t }

// SetResultsList sets the [SimRun.ResultsList]:
// ResultsList is the list of result records.
func (t *SimRun) SetResultsList(v ...*Result) *SimRun { t.ResultsList = v; return t }

var _ = types.AddFunc(&types.Func{Name: "main.main", Doc: "important: must be run from an interactive terminal.\nWill quit immediately if not!"})

var _ = types.AddFunc(&types.Func{Name: "main.Interactive", Args: []string{"c", "in"}, Returns: []string{"error"}})

var _ = types.AddFunc(&types.Func{Name: "main.NewSimRunWindow", Doc: "NewSimRunWindow returns a new data Browser window for given\nfile system (nil for os files) and data directory.\ndo RunWindow on resulting [core.Body] to open the window.", Args: []string{"fsys", "dataDir"}, Returns: []string{"Body", "SimRun"}})
