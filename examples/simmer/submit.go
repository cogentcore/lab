// Code generated by "goal build"; DO NOT EDIT.
//line submit.goal:1
// Copyright (c) 2024, Cogent Core. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
	"os"
	"path"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"cogentcore.org/core/base/fsx"
	"cogentcore.org/lab/goal/goalib"
	"cogentcore.org/lab/lab"
)

// NextJobNumber returns the next sequential job number to use,
// incrementing value saved in last_job.number file
func (sr *Simmer) NextJobNumber() int {
	jf := "last_job.number"
	jnf := goalib.ReadFile(jf)
	jn := 0
	if jnf != "" {
		jn, _ = strconv.Atoi(strings.TrimSpace(jnf))
	}
	jn++
	goalib.WriteFile(jf, strconv.Itoa(jn))
	return jn
}

func (sr *Simmer) NextJobID() string {
	jn := sr.NextJobNumber()
	jstr := fmt.Sprintf("%s%05d", sr.Config.UserShort, jn)
	return jstr
}

// FindGoMod finds the go.mod file starting from the given directory
func (sr *Simmer) FindGoMod(dir string) string {
	for {
		if goalib.FileExists(filepath.Join(dir, "go.mod")) {
			return dir
		}
		dir = filepath.Dir(dir)
		if dir == "" {
			return ""
		}
	}
	return ""
}

// CopyFilesToJob copies files with given extensions (none for all),
// from localSrc to localJob and remote hostJob (@1).
// Ensures directories are made in the job locations.
// If origProjPath and projPath are non-empty, and file is .go file, then the
// origProjPath -> projPath replacement.
func (sr *Simmer) CopyFilesToJob(localSrc, localJob, hostJob, origProjPath, projPath string, exts ...string) {
	goalrun.Run("@0")
	goalrun.Run("mkdir", "-p", localJob)
	goalrun.Run("cd", localJob)
	if sr.IsSlurm() {
		goalrun.Run("@1")
		goalrun.Run("cd")
		goalrun.Run("mkdir", "-p", hostJob)
		goalrun.Run("cd", hostJob)
		goalrun.Run("@0")
	}
	efls := fsx.Filenames(localSrc, exts...)
	for _, f := range efls {
		sfn := filepath.Join(localSrc, f)
		goalrun.Run("/bin/cp", sfn, f)
		if projPath != "" && strings.HasSuffix(f, ".go") {
			goalib.ReplaceInFile(f, origProjPath, projPath)
		}
		if sr.IsSlurm() {
			goalrun.Run("scp", f, "@1:"+f)
		}
	}
}

// NewJob runs a new job with given parameters.
// This is run as a separate goroutine!
func (sr *Simmer) NewJob(jp SubmitParams) {
	message := jp.Message
	args := jp.Args
	label := jp.Label
	goalrun.Run("@0")

	os.Chdir(sr.DataRoot)
	jid := sr.NextJobID()
	spath := sr.ServerJobPath(jid)
	jpath := sr.JobPath(jid)
	sr.AsyncMessageSnackbar("Submitting Job: " + jid)

	isSlurm := sr.IsSlurm()

	gomodDir := sr.FindGoMod(sr.StartDir)
	subDir := strings.TrimPrefix(sr.StartDir, gomodDir)
	projPath := path.Join("emer", subDir)
	origProjPath := path.Join(sr.Config.Package, subDir)
	// fmt.Println("gmd:", gomodDir, "sd:", subDir, "pp:", projPath, "opp:", origProjPath)

	// fmt.Println(jpath)
	os.MkdirAll(jpath, 0750)
	os.Chdir(jpath)
	goalib.WriteFile("job.message", message)
	goalib.WriteFile("job.args", args)
	goalib.WriteFile("job.label", label)
	goalib.WriteFile("job.submit", time.Now().Format(sr.Config.TimeFormat))
	goalib.WriteFile("job.status", "Submitted")

	// need to do sub-code first and update paths in copied files
	cdirs := sr.Config.CodeDirs
	if sr.Config.Job.SubCmd {
		cdirs = append(cdirs, "cmd")
	}
	for _, ed := range cdirs {
		goalrun.Run("@0")
		loce := filepath.Join(sr.StartDir, ed)
		jpathe := filepath.Join(jpath, ed)
		spathe := filepath.Join(spath, ed)
		sr.CopyFilesToJob(loce, jpathe, spathe, origProjPath, projPath, ".go")
	}
	// copy local files:
	if isSlurm {
		goalrun.Run("@1")
		goalrun.Run("cd")
		goalrun.Run("mkdir", "-p", spath)
		goalrun.Run("cd", spath)
	}
	goalrun.Run("@0")
	goalrun.Run("cd", jpath)
	fls := fsx.Filenames(sr.StartDir, ".go")
	for _, f := range fls {
		sfn := filepath.Join(sr.StartDir, f)
		goalrun.Run("/bin/cp", sfn, f)
		goalib.ReplaceInFile(f, origProjPath, projPath)
		if isSlurm {
			goalrun.Run("scp", f, "@1:"+f)
		}
	}
	for _, f := range sr.Config.ExtraFiles {
		sfn := filepath.Join(sr.StartDir, f)
		goalrun.Run("/bin/cp", sfn, f)
		if isSlurm {
			goalrun.Run("scp", sfn, "@1:"+f)
		}
	}
	for _, ed := range sr.Config.ExtraDirs {
		jpathe := filepath.Join(jpath, ed)
		spathe := filepath.Join(spath, ed)
		loce := filepath.Join(sr.StartDir, ed)
		sr.CopyFilesToJob(loce, jpathe, spathe, "", "")
	}
	if isSlurm {
		goalrun.Run("@1")
		goalrun.Run("cd")
		goalrun.Run("cd", spath)
	}
	goalrun.Run("@0")
	goalrun.Run("cd", jpath)

	sr.AsyncMessageSnackbar("Job: " + jid + " files copied")

	if gomodDir != "" {
		sfn := filepath.Join(gomodDir, "go.mod")
		// fmt.Println("go.mod dir:", gomodDir, sfn)
		if isSlurm {
			goalrun.Run("scp", sfn, "@1:go.mod")
			sfn = filepath.Join(gomodDir, "go.sum")
			goalrun.Run("scp", sfn, "@1:go.sum")
			goalrun.Run("@1")
		} else {
			goalrun.Run("cp", sfn, "go.mod")
			sfn = filepath.Join(gomodDir, "go.sum")
			goalrun.Run("cp", sfn, "go.sum")
		}
		// note: using local go here for baremetal
		goalrun.Run("go", "mod", "edit", "-module", projPath)
		if sr.Config.Package != "" {
			goalrun.Run("go", "get", sr.Config.Package+"@"+sr.Config.Version)
		}
		if sr.Config.ExtraGoGet != "" {
			goalrun.Run("go", "get", sr.Config.ExtraGoGet)
		}
		goalrun.Run("go", "mod", "tidy")
		if isSlurm {
			goalrun.Run("@0")
			goalrun.Run("scp", "@1:go.mod", "go.mod")
			goalrun.Run("scp", "@1:go.sum", "go.sum")
		}
	} else {
		fmt.Println("go.mod file not found!")
	}

	if isSlurm {
		sid := sr.SubmitSBatch(jid, args)
		goalib.WriteFile("job.job", sid)
		fmt.Println("server job id:", sid)
		goalrun.Run("scp", "job.job", "@1:job.job")
		sr.AsyncMessageSnackbar("Job: " + jid + " server job: " + sid + " successfully submitted")
		goalrun.Run("@1", "cd")
	} else {
		sid := sr.SubmitBare(jid, args)
		goalib.WriteFile("job.job", sid)
		fmt.Println("server job id:", sid)
		sr.AsyncMessageSnackbar("Job: " + jid + " server job: " + sid + " successfully submitted")
	}
	goalrun.Run("@0")
	sr.UpdateSimsAsync()
}

// Submit submits a job to SLURM on the server, using an array
// structure, with an outer startup job that calls the main array
// jobs and a final cleanup job.  Creates a new job dir based on
// incrementing counter, synchronizing the job files.
func (sr *Simmer) Submit() { //types:add
	lab.PromptStruct(sr, &sr.Config.Submit, "Submit a new job", func() {
		go sr.NewJob(sr.Config.Submit)
	})
}
