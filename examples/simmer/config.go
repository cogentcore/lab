// Code generated by "goal build"; DO NOT EDIT.
//line config.goal:1
// Copyright (c) 2024, Cogent Core. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"path/filepath"
	"strings"

	"cogentcore.org/lab/lab"
	"cogentcore.org/lab/table"
)

// FilterResults specifies which results files to open.
type FilterResults struct {
	// File name contains this string, e.g., "_epoch" or "_run"
	FileContains string `width:"60"`

	// extension of files, e.g., .tsv
	Ext string

	// if true, fetch results before opening.
	Fetch bool
}

func (fp *FilterResults) Defaults() {
	fp.FileContains = "_epc"
	fp.Ext = ".tsv"
	fp.Fetch = true
}

// SubmitParams specifies the parameters for submitting a job.
type SubmitParams struct {

	// Message describing the simulation:
	// this is key info for what is special about this job, like a github commit message
	Message string `width:"80"`

	// Label is brief, unique label used for plots to label this job
	Label string `width:"80"`

	//	arguments to pass on the command line.
	//
	// -nogui is already passed by default
	Args string `width:"80"`
}

// JobParams are parameters for running the job
type JobParams struct {

	// NRuns is the number of parallel runs; can also set to 1
	// and run multiple runs per job using args.
	NRuns int

	// Hours is the max number of hours: slurm will terminate if longer,
	// so be generous 2d = 48, 3d = 72, 4d = 96, 5d = 120, 6d = 144, 7d = 168
	Hours int

	// Memory per CPU in gigabytes
	Memory int

	// Tasks is the number of mpi "tasks" (procs in MPI terminology).
	Tasks int

	// CPUsPerTask is the number of cpu cores (threads) per task.
	CPUsPerTask int

	// TasksPerNode is how to allocate tasks within compute nodes
	// cpus_per_task * tasks_per_node <= total cores per node.
	TasksPerNode int

	// Qos is the queue "quality of service" name.
	Qos string

	// If true, the executable is in a subdirectory with the same name as [Config.Project],
	// filename main.go, to allow the primary directory to be imported into other apps.
	// Manages the copying and building of this sub-command.
	SubCmd bool

	// BuildArgs are extra arts to pass during building, such as -tags mpi for mpi
	BuildArgs string
}

func (jp *JobParams) Defaults() {
	jp.NRuns = 10
	jp.Hours = 1
	jp.Memory = 1
	jp.Tasks = 1
	jp.CPUsPerTask = 8
	jp.TasksPerNode = 1
}

// ServerParams are parameters for the server.
type ServerParams struct {

	// Name is the name of current server using to run jobs;
	// gets recorded with each job.
	Name string

	// Root is the root path from user home dir on server.
	// is auto-set to: filepath.Join("simserver", Project, User)
	Root string

	// Slurm uses the slurm job manager. Otherwise uses a bare job manager.
	Slurm bool
}

func (sp *ServerParams) Defaults() {
}

// Configuration holds all of the user-settable parameters
type Configuration struct {

	// DataRoot is the path to the root of the data to browse.
	DataRoot string

	// StartDir is the starting directory, where the app was originally started.
	StartDir string

	// User id as in system login name (i.e., user@system).
	User string

	// UserShort is the first 3 letters of User,
	// for naming jobs (auto-set from User).
	UserShort string

	// Project is the name of simulation project, lowercase
	// (should be name of source dir).
	Project string

	// Package is the parent package: e.g., github.com/emer/axon/v2
	// This is used to update the go.mod, along with the Version.
	Package string

	// Version is the current git version string, from git describe --tags.
	Version string

	// Job has the parameters for job resources etc.
	Job JobParams `display:"inline"`

	// Server has server parameters.
	Server ServerParams

	// GroupColumns are the column(s) to use for grouping result data, for PlotMean.
	// e.g., Epoch for epoch-level results.
	GroupColumns []string

	// FetchFiles is a glob expression for files to fetch from server,
	// for Fetch command. Is *.tsv by default.
	FetchFiles string

	// ExcludeNodes are nodes to exclude from job, based on what is slow.
	ExcludeNodes string

	// ExtraFiles has extra files to upload with job submit, from same dir.
	ExtraFiles []string

	// ExtraDirs has subdirs with other files to upload with job submit
	// (non-code -- see CodeDirs).
	ExtraDirs []string

	// CodeDirs has subdirs with code to upload with job submit;
	// go.mod auto-updated to use.
	CodeDirs []string

	// ExtraGoGet is an extra package to do "go get" with, for launching the job.
	ExtraGoGet string

	// JobScript is a job script to use for running the simulation,
	// instead of the basic default, if non-empty.
	// This is written to the job.sbatch file. If it contains a $JOB_ARGS string
	// then that is replaced with the args entered during submission.
	// If using slurm, this switches to a simple direct sbatch submission instead
	// of the default parallel job submission. All standard slurm job parameters
	// are automatically inserted at the start of the file, so this script should
	// just be the actual job running actions after that point.
	JobScript string

	// SetupScript contains optional lines of bash script code to insert at
	// the start of the job submission script, which is then followed by
	// the default script. For example, if a symbolic link to a large shared
	// resource is needed, make that link here.
	SetupScript string

	// TimeFormat is the format for timestamps,
	// defaults to "2006-01-02 15:04:05 MST"
	TimeFormat string `default:"2006-01-02 15:04:05 MST"`

	// Filter has parameters for filtering results.
	Filter FilterResults

	// Submit has parameters for submitting jobs; set from last job run.
	Submit SubmitParams
}

func (cf *Configuration) Defaults() {
	goalrun.Run("@0")
	goalrun.Run("cd")
	goalrun.Run("cd", cf.StartDir)
	cf.Version = strings.TrimSpace(goalrun.Output("git", "describe", "--tags"))
	goalrun.Run("cd", cf.DataRoot)
	cf.User = strings.TrimSpace(goalrun.Output("echo", "$USER"))
	_, pj := filepath.Split(cf.StartDir)
	cf.Project = pj
	cf.Job.Defaults()
	cf.Server.Defaults()
	cf.FetchFiles = "*.tsv job.label"
	cf.Filter.Defaults()
	cf.TimeFormat = "2006-01-02 15:04:05 MST"
	cf.GroupColumns = []string{"Epoch"}
}

func (cf *Configuration) Update() {
	cf.UserShort = cf.User[:3]
	cf.Server.Root = filepath.Join("simserver", cf.Project, cf.User)
}

// Result has info for one loaded result, as a table.Table
type Result struct {

	// job id for results
	JobID string

	// short label used as a legend in the plot
	Label string

	// description of job
	Message string

	// args used in running job
	Args string

	// path to data
	Path string

	// result data
	Table *table.Table
}

// EditConfig edits the configuration
func (sr *Simmer) EditConfig() { //types:add
	lab.PromptStruct(sr, &sr.Config, "Configuration parameters", nil)
}
