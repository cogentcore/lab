// Copyright (c) 2024, Cogent Lab. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"strconv"
	"time"
	
	"cogentcore.org/core/base/fsx"
	"cogentcore.org/lab/goal/goalib"
	"cogentcore.org/lab/lab"
)

// NextJobNumber returns the next sequential job number to use,
// incrementing value saved in last_job.number file
func (sr *Simmer) NextJobNumber() int {
	jf := "last_job.number"
	jnf := goalib.ReadFile(jf)
	jn := 0
	if jnf != "" {
		jn, _ = strconv.Atoi(strings.TrimSpace(jnf))
	}
	jn++
	goalib.WriteFile(jf, strconv.Itoa(jn))
	return jn
}

func (sr *Simmer) NextJobID() string {
	jn := sr.NextJobNumber()
	jstr := fmt.Sprintf("%s%05d", sr.Config.UserShort, jn)
	return jstr
}

// FindGoMod finds the go.mod file starting from the given directory
func (sr *Simmer) FindGoMod(dir string) string {
	for {
		if goalib.FileExists(filepath.Join(dir, "go.mod")) {
			return dir
		}
		dir = filepath.Dir(dir)
		if dir == "" {
			return ""
		}
	}
	return ""
}

// GoModulePath returns the overall module path for project
// in given directory, and the full module path to the current
// project, which is a subdirectory within the module.
func (sr *Simmer) GoModulePath(dir string) (modpath, fullpath string) {
	@0
	os.Chdir(dir)
	cd {dir}
	gg := goalib.SplitLines($go mod graph$)
	gg = strings.Fields(gg[0])
	if len(gg) == 0 {
		fmt.Println("GoModulePath: unexpected error: system seems to be out of whack")
		return 
	}
	modpath = gg[0]

	// strategy: go up the dir until the dir name matches the last element of modpath
	dirsp := strings.Split(dir, "/")
	n := len(dirsp)
	for i := n-1; i >= 0; i-- {
		d := dirsp[i]
		if strings.HasSuffix(modpath, d) {
			fullpath = filepath.Join(modpath, strings.Join(dirsp[i+1:], "/"))
			break
		}
	}
	return
}

// CopyFilesToJob copies files with given extensions (none for all),
// from localSrc to localJob and remote hostJob (@1).
// Ensures directories are made in the job locations
func (sr *Simmer) CopyFilesToJob(localSrc, localJob, hostJob string, exts ...string) {
	@0
	if !sr.IsSlurm() { // baremetal does it separately
		return
	}
	mkdir -p {localJob}
	cd {localJob}
	@1
	cd
	mkdir -p {hostJob}
	cd {hostJob}
	@0
	efls := fsx.Filenames(localSrc, exts...)
	for _, f := range efls {
		sfn := filepath.Join(localSrc, f)
		/bin/cp {sfn} {f}
		scp {sfn} {"@1:"+f}
	}
}

// NewJob runs a new job with given parameters.
// This is run as a separate goroutine!
func (sr *Simmer) NewJob(jp SubmitParams) {
	message := jp.Message
	args := jp.Args
	label := jp.Label
	@0

	os.Chdir(sr.DataRoot)
	jid := sr.NextJobID()
	spath := sr.ServerJobPath(jid)
	jpath := sr.JobPath(jid)
	sr.AsyncMessageSnackbar("Submitting Job: " + jid)
	
	isSlurm := sr.IsSlurm()

	gomodDir := sr.FindGoMod(sr.StartDir)
	_, fullPath := sr.GoModulePath(sr.StartDir)
	projPath := filepath.Join("emer", sr.Config.Project)
	
	// fmt.Println("go.mod:", gomodDir, "\nmodule:", modulePath, "\nfull path:", fullPath, "\njob proj:", projPath)
	
	// fmt.Println(jpath)
	os.MkdirAll(jpath, 0750)
	os.Chdir(jpath)
	goalib.WriteFile("job.message", message)
	goalib.WriteFile("job.args", args)
	goalib.WriteFile("job.label", label)
	goalib.WriteFile("job.submit", time.Now().Format(sr.Config.TimeFormat))
	goalib.WriteFile("job.status", "Submitted")

	//	need to do sub-code first and update paths in copied files
	codepaths := make([]string, len(sr.Config.CodeDirs))
	for i, ed := range sr.Config.CodeDirs {
		@0
		loce := filepath.Join(sr.StartDir, ed)
		codepaths[i] = filepath.Join(fullPath, ed)
		jpathe := filepath.Join(jpath, ed)
		spathe := filepath.Join(spath, ed)
		sr.CopyFilesToJob(loce, jpathe, spathe, ".go")
	}
	// copy local files:
	if isSlurm {
		@1
		cd
		mkdir -p {spath}
		cd {spath}
	}
	@0
	cd {jpath}
	fls := fsx.Filenames(sr.StartDir, ".go")
	for _, f := range fls {
		sfn := filepath.Join(sr.StartDir, f)
		/bin/cp {sfn} {f}
		for i, ed := range sr.Config.CodeDirs {
			subpath := filepath.Join(projPath, ed)
			// fmt.Println("replace in:", f, codepaths[i], "->", subpath)
			goalib.ReplaceInFile(f, codepaths[i], subpath)
		}
		if isSlurm {
			scp {f} {"@1:"+f}
		}
	}
	for _, f := range sr.Config.ExtraFiles {
		sfn := filepath.Join(sr.StartDir, f)
		/bin/cp {sfn} {f}
		if isSlurm {
			scp {sfn} {"@1:"+f}
		}
	}
	for _, ed := range sr.Config.ExtraDirs {
		jpathe := filepath.Join(jpath, ed)
		spathe := filepath.Join(spath, ed)
		loce := filepath.Join(sr.StartDir, ed)
		sr.CopyFilesToJob(loce, jpathe, spathe)
	}
	if isSlurm {
		@1
		cd
		cd {spath}
	}
	@0
	cd {jpath}
	
	sr.AsyncMessageSnackbar("Job: " + jid + " files copied")

	if gomodDir != "" {
		sfn := filepath.Join(gomodDir, "go.mod")
		// fmt.Println("go.mod dir:", gomodDir, sfn)
		if isSlurm {
			scp {sfn} "@1:go.mod"
			sfn = filepath.Join(gomodDir, "go.sum")		
			scp {sfn} "@1:go.sum"
			@1
		} else {
			cp {sfn} "go.mod"
			sfn = filepath.Join(gomodDir, "go.sum")		
			cp {sfn} "go.sum"
		}
		// note: using local go here for baremetal
		go mod edit -module {projPath}
		if sr.Config.Package != "" {
			go get {sr.Config.Package + "@" + sr.Config.Version}
		}
		if sr.Config.ExtraGoGet != "" {
			go get {sr.Config.ExtraGoGet}
		}
		go mod tidy
		if isSlurm {
			@0
			scp "@1:go.mod" "go.mod"
			scp "@1:go.sum" "go.sum"
		}
	} else {
		fmt.Println("go.mod file not found!")
	}

	if isSlurm {
		sid := sr.SubmitSBatch(jid, args)
		goalib.WriteFile("job.job", sid)
		fmt.Println("server job id:", sid)
		scp job.job @1:job.job
		sr.AsyncMessageSnackbar("Job: " + jid + " server job: " + sid + " successfully submitted")
		@1 cd
	} else {
		sid := sr.SubmitBare(jid, args)
		goalib.WriteFile("job.job", sid)
		fmt.Println("server job id:", sid)
		sr.AsyncMessageSnackbar("Job: " + jid + " server job: " + sid + " successfully submitted")
	}
	@0
	sr.UpdateSimsAsync()
}

// Submit submits a job to SLURM on the server, using an array
// structure, with an outer startup job that calls the main array
// jobs and a final cleanup job.  Creates a new job dir based on
// incrementing counter, synchronizing the job files.
func (sr *Simmer) Submit() { //types:add
	lab.PromptStruct(sr, &sr.Config.Submit, "Submit a new job", func() {
		{go sr.NewJob(sr.Config.Submit)}
	})
}


