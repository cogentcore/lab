// Copyright (c) 2025, Cogent Core. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package tensor

import (
	"reflect"
	"unsafe"

	"cogentcore.org/core/base/slicesx"
)

// ToBinary returns a binary encoding of the tensor that
// includes its type, shape and all data.
// [FromBinary] makes a tensor from this binary data.
func ToBinary(tsr Values) []byte {
	shape := []int{int(tsr.DataType()), tsr.NumDims()}
	shape = append(shape, tsr.Shape().Sizes...)
	b := slicesx.ToBytes(shape)
	b = append(b, tsr.Bytes()...)
	return b
}

// FromBinary returns a [Values] tensor reconstructed
// from the binary encoding generated by ToBinary.
func FromBinary(b []byte) Values {
	shape := unsafe.Slice((*int)(unsafe.Pointer(&b[0])), 2)
	typ := reflect.Kind(shape[0])
	ndim := shape[1]
	shape = unsafe.Slice((*int)(unsafe.Pointer(&b[0])), ndim+2)
	tsr := NewOfType(typ, shape[2:]...)
	si := int(unsafe.Sizeof(ndim)) * (ndim + 2)
	tsr.SetFromBytes(b[si:])
	return tsr
}
