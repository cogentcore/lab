// Code generated by "core generate"; DO NOT EDIT.

package stats

import (
	"cogentcore.org/core/enums"
)

var _StatsValues = []Stats{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}

// StatsN is the highest valid value for type Stats, plus one.
const StatsN Stats = 21

var _StatsValueMap = map[string]Stats{`Count`: 0, `Sum`: 1, `SumAbs`: 2, `L1Norm`: 3, `Prod`: 4, `Min`: 5, `Max`: 6, `MinAbs`: 7, `MaxAbs`: 8, `Mean`: 9, `Var`: 10, `Std`: 11, `Sem`: 12, `SumSq`: 13, `L2Norm`: 14, `VarPop`: 15, `StdPop`: 16, `SemPop`: 17, `Median`: 18, `Q1`: 19, `Q3`: 20}

var _StatsDescMap = map[Stats]string{0: `count of number of elements.`, 1: `sum of elements.`, 2: `sum of absolute-value-of elements (= L1Norm).`, 3: `L1 Norm: sum of absolute values (= SumAbs).`, 4: `product of elements.`, 5: `minimum value.`, 6: `maximum value.`, 7: `minimum of absolute values.`, 8: `maximum of absolute values.`, 9: `mean value = sum / count.`, 10: `sample variance (squared deviations from mean, divided by n-1).`, 11: `sample standard deviation (sqrt of Var).`, 12: `sample standard error of the mean (Std divided by sqrt(n)).`, 13: `sum of squared values.`, 14: `L2 Norm: square-root of sum-of-squares.`, 15: `population variance (squared diffs from mean, divided by n).`, 16: `population standard deviation (sqrt of VarPop).`, 17: `population standard error of the mean (StdPop divided by sqrt(n)).`, 18: `middle value in sorted ordering.`, 19: `Q1 first quartile = 25%ile value = .25 quantile value.`, 20: `Q3 third quartile = 75%ile value = .75 quantile value.`}

var _StatsMap = map[Stats]string{0: `Count`, 1: `Sum`, 2: `SumAbs`, 3: `L1Norm`, 4: `Prod`, 5: `Min`, 6: `Max`, 7: `MinAbs`, 8: `MaxAbs`, 9: `Mean`, 10: `Var`, 11: `Std`, 12: `Sem`, 13: `SumSq`, 14: `L2Norm`, 15: `VarPop`, 16: `StdPop`, 17: `SemPop`, 18: `Median`, 19: `Q1`, 20: `Q3`}

// String returns the string representation of this Stats value.
func (i Stats) String() string { return enums.String(i, _StatsMap) }

// SetString sets the Stats value from its string representation,
// and returns an error if the string is invalid.
func (i *Stats) SetString(s string) error { return enums.SetString(i, s, _StatsValueMap, "Stats") }

// Int64 returns the Stats value as an int64.
func (i Stats) Int64() int64 { return int64(i) }

// SetInt64 sets the Stats value from an int64.
func (i *Stats) SetInt64(in int64) { *i = Stats(in) }

// Desc returns the description of the Stats value.
func (i Stats) Desc() string { return enums.Desc(i, _StatsDescMap) }

// StatsValues returns all possible values for the type Stats.
func StatsValues() []Stats { return _StatsValues }

// Values returns all possible values for the type Stats.
func (i Stats) Values() []enums.Enum { return enums.Values(_StatsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Stats) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Stats) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Stats") }
