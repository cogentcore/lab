// Code generated by "core generate"; DO NOT EDIT.

package metric

import (
	"cogentcore.org/core/enums"
)

var _MetricsValues = []Metrics{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}

// MetricsN is the highest valid value for type Metrics, plus one.
const MetricsN Metrics = 15

var _MetricsValueMap = map[string]Metrics{`Euclidean`: 0, `L2Norm`: 1, `SumSquares`: 2, `Abs`: 3, `L1Norm`: 4, `Hamming`: 5, `EuclideanBinTol`: 6, `SumSquaresBinTol`: 7, `InvCosine`: 8, `InvCorrelation`: 9, `CrossEntropy`: 10, `InnerProduct`: 11, `Covariance`: 12, `Correlation`: 13, `Cosine`: 14}

var _MetricsDescMap = map[Metrics]string{0: `Euclidean is the square root of the sum of squares differences between tensor values, aka the [L2Norm].`, 1: `L2Norm is the square root of the sum of squares differences between tensor values, aka [Euclidean] distance.`, 2: `SumSquares is the sum of squares differences between tensor values.`, 3: `Abs is the sum of the absolute value of differences between tensor values, aka the [L1Norm].`, 4: `L1Norm is the sum of the absolute value of differences between tensor values (same as [Abs]).`, 5: `Hamming computes the sum of 1s for every element that is different, i.e., &#34;city block&#34; distance.`, 6: `EuclideanBinTol computes the [Euclidean] square root of the sum of squares differences between tensor values, with binary tolerance: differences &lt; 0.5 are thresholded to 0.`, 7: `SumSquaresBinTol computes the [SumSquares] differences between tensor values, with binary tolerance: differences &lt; 0.5 are thresholded to 0.`, 8: `InvCosine is 1-[Cosine], which is useful to convert it to an Increasing metric where more different vectors have larger metric values.`, 9: `InvCorrelation is 1-[Correlation], which is useful to convert it to an Increasing metric where more different vectors have larger metric values.`, 10: `CrossEntropy is a standard measure of the difference between two probabilty distributions, reflecting the additional entropy (uncertainty) associated with measuring probabilities under distribution b when in fact they come from distribution a. It is also the entropy of a plus the divergence between a from b, using Kullback-Leibler (KL) divergence. It is computed as: a * log(a/b) + (1-a) * log(1-a/1-b).`, 11: `InnerProduct is the sum of the co-products of the tensor values.`, 12: `Covariance is co-variance between two vectors, i.e., the mean of the co-product of each vector element minus the mean of that vector: cov(A,B) = E[(A - E(A))(B - E(B))].`, 13: `Correlation is the standardized [Covariance] in the range (-1..1), computed as the mean of the co-product of each vector element minus the mean of that vector, normalized by the product of their standard deviations: cor(A,B) = E[(A - E(A))(B - E(B))] / sigma(A) sigma(B). Equivalent to the [Cosine] of mean-normalized vectors.`, 14: `Cosine is high-dimensional angle between two vectors, in range (-1..1) as the normalized [InnerProduct]: inner product / sqrt(ssA * ssB). See also [Correlation].`}

var _MetricsMap = map[Metrics]string{0: `Euclidean`, 1: `L2Norm`, 2: `SumSquares`, 3: `Abs`, 4: `L1Norm`, 5: `Hamming`, 6: `EuclideanBinTol`, 7: `SumSquaresBinTol`, 8: `InvCosine`, 9: `InvCorrelation`, 10: `CrossEntropy`, 11: `InnerProduct`, 12: `Covariance`, 13: `Correlation`, 14: `Cosine`}

// String returns the string representation of this Metrics value.
func (i Metrics) String() string { return enums.String(i, _MetricsMap) }

// SetString sets the Metrics value from its string representation,
// and returns an error if the string is invalid.
func (i *Metrics) SetString(s string) error {
	return enums.SetString(i, s, _MetricsValueMap, "Metrics")
}

// Int64 returns the Metrics value as an int64.
func (i Metrics) Int64() int64 { return int64(i) }

// SetInt64 sets the Metrics value from an int64.
func (i *Metrics) SetInt64(in int64) { *i = Metrics(in) }

// Desc returns the description of the Metrics value.
func (i Metrics) Desc() string { return enums.Desc(i, _MetricsDescMap) }

// MetricsValues returns all possible values for the type Metrics.
func MetricsValues() []Metrics { return _MetricsValues }

// Values returns all possible values for the type Metrics.
func (i Metrics) Values() []enums.Enum { return enums.Values(_MetricsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Metrics) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Metrics) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Metrics") }
