// Code generated by "core generate"; DO NOT EDIT.

package tensor

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/tensor.Indexed", IDName: "indexed", Doc: "Indexed is an indexed wrapper around a tensor.Tensor that provides a\nspecific view onto the Tensor defined by the set of indexes, which\napply to the outermost row dimension (with default row-major indexing).\nThis is the universal representation of a homogenous data type in the\n[tensor] package framework, from scalar to vector, matrix, and beyond,\nbecause it can efficiently represent any kind of element with sufficient\nflexibility to enable a full range of computations to be elegantly expressed.\nFor example, sorting and filtering a tensor only requires\nupdating the indexes while doing nothing to the Tensor itself.\nTo produce a new [Tensor] that has its raw data actually organized according\nto the indexed order, call the [NewTensor] method.\nUse the [Set]FloatRowCell methods wherever possible, for the most efficient\nand natural indirection through the indexes.  The 1D methods on underlying\ntensor data do not indirect through the indexes and must be called directly\non the [Tensor].", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Methods: []types.Method{{Name: "Sequential", Doc: "Sequential sets Indexes to nil, resulting in sequential row-wise access into tensor.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}, {Name: "IndexesNeeded", Doc: "IndexesNeeded is called prior to an operation that needs actual indexes,\ne.g., Sort, Filter.  If Indexes == nil, they are set to all rows, otherwise\ncurrent indexes are left as is. Use Sequential, then IndexesNeeded to ensure\nall rows are represented.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}, {Name: "ExcludeMissing1D", Doc: "ExcludeMissing1D deletes indexes for a 1D tensor (only) where\nthe values are missing, as indicated by NaN.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}, {Name: "AddRows", Doc: "AddRows adds n rows to end of underlying Tensor, and to the indexes in this view", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Args: []string{"n"}}}, Fields: []types.Field{{Name: "Tensor", Doc: "Tensor that we are an indexed view onto."}, {Name: "Indexes", Doc: "Indexes are the indexes into Tensor rows.\nOnly set if order is different from default sequential order.\nUse the Index() method for nil-aware logic."}}})
