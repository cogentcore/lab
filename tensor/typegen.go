// Code generated by "core generate"; DO NOT EDIT.

package tensor

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "cogentcore.org/core/tensor.Indexed", IDName: "indexed", Doc: "Indexed is an indexed wrapper around a tensor.Tensor that provides a\nspecific view onto the Tensor defined by the set of indexes, which\napply to the outer-most row dimension (with default row-major indexing).\nThis provides an efficient way of sorting and filtering a tensor by only\nupdating the indexes while doing nothing to the Tensor itself.\nTo produce a tensor that has data actually organized according to the\nindexed order, call the NewTensor method.\nUse the [Set]FloatRowCell methods wherever possible, for the most efficient\nand natural indirection through the indexes.  The 1D methods on underlying\ntensor data do not indirect through the indexes and must be called directly\non the [Tensor].", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Methods: []types.Method{{Name: "Sequential", Doc: "Sequential sets indexes to sequential row-wise indexes into tensor.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}}, {Name: "AddRows", Doc: "AddRows adds n rows to end of underlying Tensor, and to the indexes in this view", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Args: []string{"n"}}}, Fields: []types.Field{{Name: "Tensor", Doc: "Tensor that we are an indexed view onto."}, {Name: "Indexes", Doc: "Indexes are the indexes into Tensor rows."}}})
