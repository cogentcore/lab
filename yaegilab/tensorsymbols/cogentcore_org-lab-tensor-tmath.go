// Code generated by 'yaegi extract cogentcore.org/lab/tensor/tmath'. DO NOT EDIT.

package tensorsymbols

import (
	"cogentcore.org/lab/tensor/tmath"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/lab/tensor/tmath/tmath"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Abs":             reflect.ValueOf(tmath.Abs),
		"AbsOut":          reflect.ValueOf(tmath.AbsOut),
		"Acos":            reflect.ValueOf(tmath.Acos),
		"AcosOut":         reflect.ValueOf(tmath.AcosOut),
		"Acosh":           reflect.ValueOf(tmath.Acosh),
		"AcoshOut":        reflect.ValueOf(tmath.AcoshOut),
		"Add":             reflect.ValueOf(tmath.Add),
		"AddAssign":       reflect.ValueOf(tmath.AddAssign),
		"AddOut":          reflect.ValueOf(tmath.AddOut),
		"And":             reflect.ValueOf(tmath.And),
		"AndOut":          reflect.ValueOf(tmath.AndOut),
		"Asin":            reflect.ValueOf(tmath.Asin),
		"AsinOut":         reflect.ValueOf(tmath.AsinOut),
		"Asinh":           reflect.ValueOf(tmath.Asinh),
		"AsinhOut":        reflect.ValueOf(tmath.AsinhOut),
		"Assign":          reflect.ValueOf(tmath.Assign),
		"Atan":            reflect.ValueOf(tmath.Atan),
		"Atan2":           reflect.ValueOf(tmath.Atan2),
		"Atan2Out":        reflect.ValueOf(tmath.Atan2Out),
		"AtanOut":         reflect.ValueOf(tmath.AtanOut),
		"Atanh":           reflect.ValueOf(tmath.Atanh),
		"AtanhOut":        reflect.ValueOf(tmath.AtanhOut),
		"Cbrt":            reflect.ValueOf(tmath.Cbrt),
		"CbrtOut":         reflect.ValueOf(tmath.CbrtOut),
		"Ceil":            reflect.ValueOf(tmath.Ceil),
		"CeilOut":         reflect.ValueOf(tmath.CeilOut),
		"Copysign":        reflect.ValueOf(tmath.Copysign),
		"CopysignOut":     reflect.ValueOf(tmath.CopysignOut),
		"Cos":             reflect.ValueOf(tmath.Cos),
		"CosOut":          reflect.ValueOf(tmath.CosOut),
		"Cosh":            reflect.ValueOf(tmath.Cosh),
		"CoshOut":         reflect.ValueOf(tmath.CoshOut),
		"Dec":             reflect.ValueOf(tmath.Dec),
		"Dim":             reflect.ValueOf(tmath.Dim),
		"DimOut":          reflect.ValueOf(tmath.DimOut),
		"Div":             reflect.ValueOf(tmath.Div),
		"DivAssign":       reflect.ValueOf(tmath.DivAssign),
		"DivOut":          reflect.ValueOf(tmath.DivOut),
		"Equal":           reflect.ValueOf(tmath.Equal),
		"EqualOut":        reflect.ValueOf(tmath.EqualOut),
		"Erf":             reflect.ValueOf(tmath.Erf),
		"ErfOut":          reflect.ValueOf(tmath.ErfOut),
		"Erfc":            reflect.ValueOf(tmath.Erfc),
		"ErfcOut":         reflect.ValueOf(tmath.ErfcOut),
		"Erfcinv":         reflect.ValueOf(tmath.Erfcinv),
		"ErfcinvOut":      reflect.ValueOf(tmath.ErfcinvOut),
		"Erfinv":          reflect.ValueOf(tmath.Erfinv),
		"ErfinvOut":       reflect.ValueOf(tmath.ErfinvOut),
		"Exp":             reflect.ValueOf(tmath.Exp),
		"Exp2":            reflect.ValueOf(tmath.Exp2),
		"Exp2Out":         reflect.ValueOf(tmath.Exp2Out),
		"ExpOut":          reflect.ValueOf(tmath.ExpOut),
		"Expm1":           reflect.ValueOf(tmath.Expm1),
		"Expm1Out":        reflect.ValueOf(tmath.Expm1Out),
		"Floor":           reflect.ValueOf(tmath.Floor),
		"FloorOut":        reflect.ValueOf(tmath.FloorOut),
		"Gamma":           reflect.ValueOf(tmath.Gamma),
		"GammaOut":        reflect.ValueOf(tmath.GammaOut),
		"Greater":         reflect.ValueOf(tmath.Greater),
		"GreaterEqual":    reflect.ValueOf(tmath.GreaterEqual),
		"GreaterEqualOut": reflect.ValueOf(tmath.GreaterEqualOut),
		"GreaterOut":      reflect.ValueOf(tmath.GreaterOut),
		"Hypot":           reflect.ValueOf(tmath.Hypot),
		"HypotOut":        reflect.ValueOf(tmath.HypotOut),
		"Inc":             reflect.ValueOf(tmath.Inc),
		"J0":              reflect.ValueOf(tmath.J0),
		"J0Out":           reflect.ValueOf(tmath.J0Out),
		"J1":              reflect.ValueOf(tmath.J1),
		"J1Out":           reflect.ValueOf(tmath.J1Out),
		"Less":            reflect.ValueOf(tmath.Less),
		"LessEqual":       reflect.ValueOf(tmath.LessEqual),
		"LessEqualOut":    reflect.ValueOf(tmath.LessEqualOut),
		"LessOut":         reflect.ValueOf(tmath.LessOut),
		"Log":             reflect.ValueOf(tmath.Log),
		"Log10":           reflect.ValueOf(tmath.Log10),
		"Log10Out":        reflect.ValueOf(tmath.Log10Out),
		"Log1p":           reflect.ValueOf(tmath.Log1p),
		"Log1pOut":        reflect.ValueOf(tmath.Log1pOut),
		"Log2":            reflect.ValueOf(tmath.Log2),
		"Log2Out":         reflect.ValueOf(tmath.Log2Out),
		"LogOut":          reflect.ValueOf(tmath.LogOut),
		"Logb":            reflect.ValueOf(tmath.Logb),
		"LogbOut":         reflect.ValueOf(tmath.LogbOut),
		"Max":             reflect.ValueOf(tmath.Max),
		"MaxOut":          reflect.ValueOf(tmath.MaxOut),
		"Min":             reflect.ValueOf(tmath.Min),
		"MinOut":          reflect.ValueOf(tmath.MinOut),
		"Mod":             reflect.ValueOf(tmath.Mod),
		"ModAssign":       reflect.ValueOf(tmath.ModAssign),
		"ModOut":          reflect.ValueOf(tmath.ModOut),
		"Mul":             reflect.ValueOf(tmath.Mul),
		"MulAssign":       reflect.ValueOf(tmath.MulAssign),
		"MulOut":          reflect.ValueOf(tmath.MulOut),
		"Negate":          reflect.ValueOf(tmath.Negate),
		"NegateOut":       reflect.ValueOf(tmath.NegateOut),
		"Nextafter":       reflect.ValueOf(tmath.Nextafter),
		"NextafterOut":    reflect.ValueOf(tmath.NextafterOut),
		"Not":             reflect.ValueOf(tmath.Not),
		"NotEqual":        reflect.ValueOf(tmath.NotEqual),
		"NotEqualOut":     reflect.ValueOf(tmath.NotEqualOut),
		"NotOut":          reflect.ValueOf(tmath.NotOut),
		"Or":              reflect.ValueOf(tmath.Or),
		"OrOut":           reflect.ValueOf(tmath.OrOut),
		"Pow":             reflect.ValueOf(tmath.Pow),
		"PowOut":          reflect.ValueOf(tmath.PowOut),
		"Remainder":       reflect.ValueOf(tmath.Remainder),
		"RemainderOut":    reflect.ValueOf(tmath.RemainderOut),
		"Round":           reflect.ValueOf(tmath.Round),
		"RoundOut":        reflect.ValueOf(tmath.RoundOut),
		"RoundToEven":     reflect.ValueOf(tmath.RoundToEven),
		"RoundToEvenOut":  reflect.ValueOf(tmath.RoundToEvenOut),
		"Sin":             reflect.ValueOf(tmath.Sin),
		"SinOut":          reflect.ValueOf(tmath.SinOut),
		"Sinh":            reflect.ValueOf(tmath.Sinh),
		"SinhOut":         reflect.ValueOf(tmath.SinhOut),
		"Sqrt":            reflect.ValueOf(tmath.Sqrt),
		"SqrtOut":         reflect.ValueOf(tmath.SqrtOut),
		"Sub":             reflect.ValueOf(tmath.Sub),
		"SubAssign":       reflect.ValueOf(tmath.SubAssign),
		"SubOut":          reflect.ValueOf(tmath.SubOut),
		"Tan":             reflect.ValueOf(tmath.Tan),
		"TanOut":          reflect.ValueOf(tmath.TanOut),
		"Tanh":            reflect.ValueOf(tmath.Tanh),
		"TanhOut":         reflect.ValueOf(tmath.TanhOut),
		"Trunc":           reflect.ValueOf(tmath.Trunc),
		"TruncOut":        reflect.ValueOf(tmath.TruncOut),
		"Y0":              reflect.ValueOf(tmath.Y0),
		"Y0Out":           reflect.ValueOf(tmath.Y0Out),
		"Y1":              reflect.ValueOf(tmath.Y1),
		"Y1Out":           reflect.ValueOf(tmath.Y1Out),
	}
}
