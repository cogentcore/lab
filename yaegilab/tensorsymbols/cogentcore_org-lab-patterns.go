// Code generated by 'yaegi extract cogentcore.org/lab/patterns'. DO NOT EDIT.

package tensorsymbols

import (
	"cogentcore.org/lab/patterns"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/lab/patterns/patterns"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"FlipBits":               reflect.ValueOf(patterns.FlipBits),
		"FlipBitsRows":           reflect.ValueOf(patterns.FlipBitsRows),
		"MinDiffPrintIterations": reflect.ValueOf(&patterns.MinDiffPrintIterations).Elem(),
		"Mix":                    reflect.ValueOf(patterns.Mix),
		"NFromPct":               reflect.ValueOf(patterns.NFromPct),
		"NOnInTensor":            reflect.ValueOf(patterns.NOnInTensor),
		"NameRows":               reflect.ValueOf(patterns.NameRows),
		"NewRand":                reflect.ValueOf(patterns.NewRand),
		"PctActInTensor":         reflect.ValueOf(patterns.PctActInTensor),
		"PermutedBinary":         reflect.ValueOf(patterns.PermutedBinary),
		"PermutedBinaryMinDiff":  reflect.ValueOf(patterns.PermutedBinaryMinDiff),
		"PermutedBinaryRows":     reflect.ValueOf(patterns.PermutedBinaryRows),
		"RandSeed":               reflect.ValueOf(&patterns.RandSeed).Elem(),
		"RandSource":             reflect.ValueOf(&patterns.RandSource).Elem(),
		"ReplicateRows":          reflect.ValueOf(patterns.ReplicateRows),
		"RestoreSeed":            reflect.ValueOf(patterns.RestoreSeed),
		"SetRandSeed":            reflect.ValueOf(patterns.SetRandSeed),
		"Shuffle":                reflect.ValueOf(patterns.Shuffle),
		"SplitRows":              reflect.ValueOf(patterns.SplitRows),
	}
}
