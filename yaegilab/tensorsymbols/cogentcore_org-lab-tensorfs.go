// Code generated by 'yaegi extract cogentcore.org/lab/tensorfs'. DO NOT EDIT.

package tensorsymbols

import (
	"cogentcore.org/lab/tensorfs"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/lab/tensorfs/tensorfs"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Chdir":        reflect.ValueOf(tensorfs.Chdir),
		"CurDir":       reflect.ValueOf(&tensorfs.CurDir).Elem(),
		"CurRoot":      reflect.ValueOf(&tensorfs.CurRoot).Elem(),
		"DirFromTable": reflect.ValueOf(tensorfs.DirFromTable),
		"DirOnly":      reflect.ValueOf(tensorfs.DirOnly),
		"DirTable":     reflect.ValueOf(tensorfs.DirTable),
		"Get":          reflect.ValueOf(tensorfs.Get),
		"List":         reflect.ValueOf(tensorfs.List),
		"Long":         reflect.ValueOf(tensorfs.Long),
		"Mkdir":        reflect.ValueOf(tensorfs.Mkdir),
		"NewDir":       reflect.ValueOf(tensorfs.NewDir),
		"Overwrite":    reflect.ValueOf(tensorfs.Overwrite),
		"Preserve":     reflect.ValueOf(tensorfs.Preserve),
		"Record":       reflect.ValueOf(tensorfs.Record),
		"Recursive":    reflect.ValueOf(tensorfs.Recursive),
		"Set":          reflect.ValueOf(tensorfs.Set),
		"SetTensor":    reflect.ValueOf(tensorfs.SetTensor),
		"Short":        reflect.ValueOf(tensorfs.Short),
		"ValueType":    reflect.ValueOf(tensorfs.ValueType),

		// type definitions
		"DirFile": reflect.ValueOf((*tensorfs.DirFile)(nil)),
		"File":    reflect.ValueOf((*tensorfs.File)(nil)),
		"Node":    reflect.ValueOf((*tensorfs.Node)(nil)),
	}
}
