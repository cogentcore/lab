// Code generated by 'yaegi extract cogentcore.org/lab/stats/metric'. DO NOT EDIT.

package labsymbols

import (
	"cogentcore.org/lab/stats/metric"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/lab/stats/metric/metric"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AsMetricFunc":               reflect.ValueOf(metric.AsMetricFunc),
		"AsMetricOutFunc":            reflect.ValueOf(metric.AsMetricOutFunc),
		"ClosestRow":                 reflect.ValueOf(metric.ClosestRow),
		"ClosestRowOut":              reflect.ValueOf(metric.ClosestRowOut),
		"Correlation":                reflect.ValueOf(metric.Correlation),
		"CorrelationOut":             reflect.ValueOf(metric.CorrelationOut),
		"CorrelationOut64":           reflect.ValueOf(metric.CorrelationOut64),
		"Cosine":                     reflect.ValueOf(metric.Cosine),
		"CosineOut":                  reflect.ValueOf(metric.CosineOut),
		"CosineOut64":                reflect.ValueOf(metric.CosineOut64),
		"Covariance":                 reflect.ValueOf(metric.Covariance),
		"CovarianceMatrix":           reflect.ValueOf(metric.CovarianceMatrix),
		"CovarianceMatrixOut":        reflect.ValueOf(metric.CovarianceMatrixOut),
		"CovarianceOut":              reflect.ValueOf(metric.CovarianceOut),
		"CrossEntropy":               reflect.ValueOf(metric.CrossEntropy),
		"CrossEntropyOut":            reflect.ValueOf(metric.CrossEntropyOut),
		"CrossMatrix":                reflect.ValueOf(metric.CrossMatrix),
		"CrossMatrixOut":             reflect.ValueOf(metric.CrossMatrixOut),
		"DotProduct":                 reflect.ValueOf(metric.DotProduct),
		"DotProductOut":              reflect.ValueOf(metric.DotProductOut),
		"Hamming":                    reflect.ValueOf(metric.Hamming),
		"HammingOut":                 reflect.ValueOf(metric.HammingOut),
		"InvCorrelation":             reflect.ValueOf(metric.InvCorrelation),
		"InvCorrelationOut":          reflect.ValueOf(metric.InvCorrelationOut),
		"InvCosine":                  reflect.ValueOf(metric.InvCosine),
		"InvCosineOut":               reflect.ValueOf(metric.InvCosineOut),
		"L1Norm":                     reflect.ValueOf(metric.L1Norm),
		"L1NormOut":                  reflect.ValueOf(metric.L1NormOut),
		"L2Norm":                     reflect.ValueOf(metric.L2Norm),
		"L2NormBinTol":               reflect.ValueOf(metric.L2NormBinTol),
		"L2NormBinTolOut":            reflect.ValueOf(metric.L2NormBinTolOut),
		"L2NormOut":                  reflect.ValueOf(metric.L2NormOut),
		"Matrix":                     reflect.ValueOf(metric.Matrix),
		"MatrixOut":                  reflect.ValueOf(metric.MatrixOut),
		"MetricCorrelation":          reflect.ValueOf(metric.MetricCorrelation),
		"MetricCosine":               reflect.ValueOf(metric.MetricCosine),
		"MetricCovariance":           reflect.ValueOf(metric.MetricCovariance),
		"MetricCrossEntropy":         reflect.ValueOf(metric.MetricCrossEntropy),
		"MetricDotProduct":           reflect.ValueOf(metric.MetricDotProduct),
		"MetricHamming":              reflect.ValueOf(metric.MetricHamming),
		"MetricInvCorrelation":       reflect.ValueOf(metric.MetricInvCorrelation),
		"MetricInvCosine":            reflect.ValueOf(metric.MetricInvCosine),
		"MetricL1Norm":               reflect.ValueOf(metric.MetricL1Norm),
		"MetricL2Norm":               reflect.ValueOf(metric.MetricL2Norm),
		"MetricL2NormBinTol":         reflect.ValueOf(metric.MetricL2NormBinTol),
		"MetricSumSquares":           reflect.ValueOf(metric.MetricSumSquares),
		"MetricSumSquaresBinTol":     reflect.ValueOf(metric.MetricSumSquaresBinTol),
		"MetricsN":                   reflect.ValueOf(metric.MetricsN),
		"MetricsValues":              reflect.ValueOf(metric.MetricsValues),
		"SumSquares":                 reflect.ValueOf(metric.SumSquares),
		"SumSquaresBinTol":           reflect.ValueOf(metric.SumSquaresBinTol),
		"SumSquaresBinTolOut":        reflect.ValueOf(metric.SumSquaresBinTolOut),
		"SumSquaresBinTolScaleOut64": reflect.ValueOf(metric.SumSquaresBinTolScaleOut64),
		"SumSquaresOut":              reflect.ValueOf(metric.SumSquaresOut),
		"SumSquaresOut64":            reflect.ValueOf(metric.SumSquaresOut64),
		"SumSquaresScaleOut64":       reflect.ValueOf(metric.SumSquaresScaleOut64),
		"Vectorize2Out64":            reflect.ValueOf(metric.Vectorize2Out64),
		"Vectorize3Out64":            reflect.ValueOf(metric.Vectorize3Out64),
		"VectorizeOut64":             reflect.ValueOf(metric.VectorizeOut64),
		"VectorizePre3Out64":         reflect.ValueOf(metric.VectorizePre3Out64),
		"VectorizePreOut64":          reflect.ValueOf(metric.VectorizePreOut64),

		// type definitions
		"MetricFunc":    reflect.ValueOf((*metric.MetricFunc)(nil)),
		"MetricOutFunc": reflect.ValueOf((*metric.MetricOutFunc)(nil)),
		"Metrics":       reflect.ValueOf((*metric.Metrics)(nil)),
	}
}
