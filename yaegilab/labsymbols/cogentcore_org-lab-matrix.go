// Code generated by 'yaegi extract cogentcore.org/lab/matrix'. DO NOT EDIT.

package labsymbols

import (
	"cogentcore.org/lab/matrix"
	"reflect"
)

func init() {
	Symbols["cogentcore.org/lab/matrix/matrix"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CallOut1":                 reflect.ValueOf(matrix.CallOut1),
		"CallOut2":                 reflect.ValueOf(matrix.CallOut2),
		"CopyFromDense":            reflect.ValueOf(matrix.CopyFromDense),
		"Det":                      reflect.ValueOf(matrix.Det),
		"Diagonal":                 reflect.ValueOf(matrix.Diagonal),
		"DiagonalIndices":          reflect.ValueOf(matrix.DiagonalIndices),
		"DiagonalN":                reflect.ValueOf(matrix.DiagonalN),
		"Eig":                      reflect.ValueOf(matrix.Eig),
		"EigOut":                   reflect.ValueOf(matrix.EigOut),
		"EigSym":                   reflect.ValueOf(matrix.EigSym),
		"EigSymOut":                reflect.ValueOf(matrix.EigSymOut),
		"Identity":                 reflect.ValueOf(matrix.Identity),
		"Inverse":                  reflect.ValueOf(matrix.Inverse),
		"InverseOut":               reflect.ValueOf(matrix.InverseOut),
		"LogDet":                   reflect.ValueOf(matrix.LogDet),
		"Mul":                      reflect.ValueOf(matrix.Mul),
		"MulOut":                   reflect.ValueOf(matrix.MulOut),
		"NewDense":                 reflect.ValueOf(matrix.NewDense),
		"NewMatrix":                reflect.ValueOf(matrix.NewMatrix),
		"NewSymmetric":             reflect.ValueOf(matrix.NewSymmetric),
		"ProjectOnMatrixColumn":    reflect.ValueOf(matrix.ProjectOnMatrixColumn),
		"ProjectOnMatrixColumnOut": reflect.ValueOf(matrix.ProjectOnMatrixColumnOut),
		"SVD":                      reflect.ValueOf(matrix.SVD),
		"SVDOut":                   reflect.ValueOf(matrix.SVDOut),
		"SVDValues":                reflect.ValueOf(matrix.SVDValues),
		"SVDValuesOut":             reflect.ValueOf(matrix.SVDValuesOut),
		"StringCheck":              reflect.ValueOf(matrix.StringCheck),
		"Trace":                    reflect.ValueOf(matrix.Trace),
		"Tri":                      reflect.ValueOf(matrix.Tri),
		"TriL":                     reflect.ValueOf(matrix.TriL),
		"TriLIndicies":             reflect.ValueOf(matrix.TriLIndicies),
		"TriLNum":                  reflect.ValueOf(matrix.TriLNum),
		"TriLView":                 reflect.ValueOf(matrix.TriLView),
		"TriU":                     reflect.ValueOf(matrix.TriU),
		"TriUIndicies":             reflect.ValueOf(matrix.TriUIndicies),
		"TriUNum":                  reflect.ValueOf(matrix.TriUNum),
		"TriUView":                 reflect.ValueOf(matrix.TriUView),
		"TriUpper":                 reflect.ValueOf(matrix.TriUpper),

		// type definitions
		"Matrix":    reflect.ValueOf((*matrix.Matrix)(nil)),
		"Symmetric": reflect.ValueOf((*matrix.Symmetric)(nil)),
	}
}
