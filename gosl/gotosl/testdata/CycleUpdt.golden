// Code generated by "gosl"; DO NOT EDIT
// kernel: CycleUpdt

// // Params are the parameters for the computation. // 
@group(0) @binding(0)
var<storage, read> TensorStrides: array<u32>;
@group(0) @binding(2)
var<storage, read_write> Ctx: array<Context>;
// // Data is the data on which the computation operates. // 2D: outer index is data, inner index is: Raw, Integ, Exp vars. // 

alias GPUVars = i32;

@compute @workgroup_size(64, 1, 1)
fn main(@builtin(workgroup_id) wgid: vec3<u32>, @builtin(num_workgroups) nwg: vec3<u32>, @builtin(local_invocation_index) loci: u32) {
	let idx = loci + (wgid.x + wgid.y * nwg.x + wgid.z * nwg.x * nwg.y) * 64;
	CycleUpdt(idx);
}


//////// import: "basic.go"
const  Raw: i32   = 0;
const  Integ: i32 = 1;
const  Exp: i32 = 2;
const  NVars: i32 = 3;
alias NeuronFlags = i32;
const  NeuronOff: NeuronFlags = 0x01;
const  NeuronHasExt: NeuronFlags = 0x02; // note: 1<<2 does NOT work
const  NeuronHasTarg: NeuronFlags = 0x04;
const  NeuronHasCmpr: NeuronFlags = 0x08;
alias Modes = i32;
const  NoEvalMode: Modes = 0;
const  AllModes: Modes = 1;
const  Train: Modes = 2;
const  Test: Modes = 3;
const testSlice = array(NoEvalMode, AllModes, Train, Test);
struct SubParamStruct {
	A: f32,
	B: f32,
	C: f32,
	D: f32,
}
struct ParamStruct {
	Tau: f32,
	Dt:     f32,
	Option: i32, // note: standard bool doesn't work
	pad: f32, // comment this out to trigger alignment warning
	Subs: SubParamStruct,
}
struct Context {
	Cycles: f32,
	Index:  u32,
	Option: i32,
	pad:    f32, // comment this out to trigger alignment warning
}
fn Context_UpdtCycle(ctx: ptr<function,Context>) {
	(*ctx).Cycles += f32(1);
	(*ctx).Index = u32(42);
}
fn CycleUpdt(i: u32) { //gosl:kernel read-write:Ctx
	var ctx = Ctx[0];
	Context_UpdtCycle(&ctx);
	Ctx[0] = ctx;
}